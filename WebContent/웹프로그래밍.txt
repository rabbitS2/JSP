웹프로그래밍.txt

  버퍼링 -> 스트리밍
  모든 웹페이지도 데이터의 입력, 출력으로 구성 
  
 * 통신 프로토콜 : http,https 사용
   => 컴퓨터들 사이에서 데이터를 주고 받을때 접속하는 방법,속도,형식에 대한 약속
 
 * TCP/IP : 통신 프로토콜의 일종 => 사용하는 방법
 
  	애플리케이션 층			 <-(가상의 데이터 송수신)>	애플리케이션 층
  	트랜스포트 층(TCP/UDP)							트랜스포트 층(TCP/UDP)
  	네트워크 층(인터넷/IP)	<- (실제 데이터   			네트워크 층(인터넷/IP)
  	데이터링크 층				      	송수신	->	데이터링크 층
  	
  	[com1]										[com2]
  	
  	*애플리케이션 층 : 실제 사용되는 인터넷 응용프로그램 (크롬, 카카오톡,...)
  	*트랜스포트 층 : 데이터 전송시 에러검출/정정
  	*네트워크 층 : 데이터를 패킷단위로 정확한 위치에 전달
  	*데이터링크 층 : 렌카드 제어 및 데이터 통신을 위한 HW 제어
  	
  	
  	* 서버 : 정보/서비스를 제공하는 쪽(컴퓨터)
  	* 클라이언트 : 정보/서비스를 제공받는 쪽(컴퓨터)
  	* IP주소 : 인터넷 환경에서 컴퓨터를 구분하는 번호(ex 전화번호)
  	        192.168.2.200  => 4자리 숫자 조합(0~255)으로 생성되어있음
  	  => [localhost<->127.0.0.1] : 자신의 컴퓨터      
  	* 호스트 : 컴퓨터  
  	* 포트번호 : 여러개의 응용프로그램을 구분하는 번호
  	       tomcat : 8080
  	       mysql : 3306
  	       FTP : 21
  	       ....
  	   => 프로그램 개발시 소켓통신프로그램 생성시 (5000~ 이상의 포트번호사용)    
  	 
  	* 도메인 주소 : 실제 IP주소를 대신해서 사용하는 영문자 주소
  	 => 도메인주소는 절대 중복X
  	 
  	 
  	 * 서버와 클라이언트는 정적데이터와 동적데이터를 서로 주고 받는다.
  	 
  	 * 정적데이터 : 변화가 없는 정적인데이터(이미지,html,javascript등...)
  	  => web서버에서 처리 (아파치 웹서버)
  	 
  	 * 동적데이터 : 변화가 있는 동적인데이터(DB..)
  	  => WAS서버에서 처리 (톰캣)
  
  
  * JSP
  
  
  	 
  	 
  	 
  	 
  	       
  	
  	        
  	        
  	
  	
  	
  * 자바빈(JavaBean) (p245~)
   - 디자인부분, 비지니스 로직을 분리하기위한 기술
   - 특정한 기능을 지닌 컴포넌트(객체)
   
   => 자바빈 설계 규약
   1) 기본패키지 이외의 다른 패키지에 작성해야한다.
   2) 기본생성자가 있어야함.
   3) 멤버변수는 private 접근지정자 사용.
   4) set/get 메서드를 생성해야함.(public) 
   
   =>  
   
   
  ---------------------------------------------------
  게시판 만들기 (CRUD)
   (Create)
 - 새글쓰기, 답글, 댓글
   (Read)
 - 글 목록, 글 상세페이지 
   (Update)
 - 글 정보 수정, 답글, 댓글
   (Delete)
 - 글 정보 삭제, 답글, 댓글
   
   => 프로젝트 요구사항 파악 => DB 테이블 생성 => 코드 작성
   
   CREATE TABLE `jspdb`.`itwill_board` (
  `num` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `pass` VARCHAR(100) NOT NULL,
  `subject` VARCHAR(500) NOT NULL,
  `content` VARCHAR(2000) NOT NULL,
  `readcount` INT NULL,
  `re_ref` INT NULL,
  `re_lev` INT NULL,
  `re_seq` INT NULL,
  `date` DATE NULL,
  `ip` VARCHAR(45) NULL,
  `file` VARCHAR(100) NULL,
  PRIMARY KEY (`num`));
   
   
   
 * 예외 : 일반적이지 않은 실행 상태  
 * 예외처리 
    try ~ catch ~ finally  구문
    
    
    try{
         예외가 발생할수도 있는 코드 작성
    }catch(Exception 객체){
          발생한 예외에 대한 처리 -> 에러코드 출력
    }finally{
         예외 여부와 상관없이 반드시 한번 실행되야하는 코드 작성
         =>자원해제 
    }
    
    정상코드 : try 시작->try 끝->finally 시작-> finally 끝
    문제코드 : try 시작 -> 문제 발생 -> catch() 시작 -> catch()끝->finally 시작-> finally 끝  


		
  * 커넥션풀(Connection Pool) : 미리 연결정보(connection)을 생성해서
      저장후 사용 (pool) -> 사용 후 반납
    
  * 서비스() 1개당 - 1개의 Connection 사용
  * 커넥션의 개수를 제한
  * 관리객체가 사용후 자원해제(회수)
  
  1) 웹브라우저에서 요청
  2) 할당될 커넥션 객체가 있는지 확인
  3) 객체가 있는경우
   3-1) 커넥션 할당
   3-2) 커넥션 객체 사용(sql 실행)
   3-3) 커넥션 반납
  
  4) 객체가 없는경우
   4-1) 커넥션 객체가 반환될때 까지 대기
   4-2) 임시 커넥션 객체를 생성
   
   
   
   http://commons.apache.org/
   
  - Collections
   https://commons.apache.org/proper/commons-collections/download_collections.cgi
  - DBCP
   http://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi
  - Pool
   https://commons.apache.org/proper/commons-pool/download_pool.cgi
    
   => WEB-INF/lib 폴더 복사
   
 - META-INF/context.xml 파일 생성
  => 디비연결에 필요한 정보를 작성
     
   <Resource 
    name=" 해당 연결의 이름 "
    auth=" 컨테이너 자원 관리자 : Application/Container"
    type=" javax.sql.DataSource 객체 타입 " 
    driverClassName=" 드라이버 이름 "
    username=" 사용자명 "
    password=" 사용자 비밀번호 "
    url=" DB접속 URL "
    maxWait="5000" 1/1000초
  />
  
  => DAO 파일에서 디비 연결동작
    
    - 사용중인 프로젝트의 정보를 가져오는 객체를 생성
	Context initCTX = new InitialContext();
	
	- 저장한 context.xml 파일의 정보를 불어오는 메서드 실행
	- 디비연결정보를 저장하는 객체에 파일의 정보를 저장
	
	(객체 2개로 초기화)
	 Context envCTX = (Context) initCTX.lookup("java:comp/env");
	                             +
	 DataSource ds = (DataSource) envCTX.lookup("jdbc/mysqlDB");
	

    (객체 1개로 초기화)	
	DataSource ds =
	(DataSource) initCTX.lookup("java:comp/env/jdbc/mysqlDB");
	                             [    고정         ][    context.xml 파일 이름 속성      ]
	                             
	
	- ds 객체를 사용해서 디비 연결
	conn = ds.getConnection();
		
		    
 ------------------------------------------------------------
 
  게시판 처리로직
  
  글쓰기Form (정보입력) -> 글쓰기Pro (정보처리) <-> DAO <-> DB
                         |
                                       리스트 페이지 -> 제목클릭 -> DAO -> 본문
                         |  |
  글 수정Form(DB->정보입력) ->| 글 수정Pro <-> DAO <-> DB
                         |  
  글 삭제 Form(정보입력) -> 글 삭제 Pro  <-> DAO <-> DB 
  
  
  --------------------------------------------------------------
   답글 
   re_ref : 부모글(원글)에서 달린 답변글을 표기하기 위한 그룹번호   
                    일반글의 경우  그룹번호(re_ref)와 글번호(num)가 동일
                    답글의 경우 그룹번호와 글번호가 다름       
   re_lev : 답변글의 들여쓰기. 일반글은 0 (들여쓰기 없음)
   re_seq : 답변글의 순서. 일반글 0
   
   ----------------------------------------------------
   num	subject		re_ref		re_lev		re_seq
   ----------------------------------------------------
   1	일반글		1			0		     0
   2	일반글		2			0		     0
   3     2-1답글		2			1			 1
   4	 2-2답글		2			1			 2
   5	 2-3답글		2			1			 3
   6 	  2-3-1답글	2			2			 4
   7	  2-2-1답글	2			2			 5
   8 	일반글		8			0			 0
   9	 1-1답글		1			1			 1	
   10	   2-2-1-1답글  2			3			 6
   
  
  
  ---------------------------------------------------
   파일 업로드 / 다운로드 p305~
   http://www.servlets.com/

  [COS File Upload Library] 링크 클릭
     
  [cos-20.08.zip] 파일 다운로드 
  
  압축해제 후  cos-20.08\lib\cos.jar 파일
  WebContent/WEB-INF/lib 폴더에 추가 
  

 * 파일은 내컴퓨터(서버컴퓨터)의 HDD에 저장  
 
 
 (가상경로-외부에서 접근가능한 폴더)
 D:\workspace_jsp2\StudyJSP2\WebContent\upload
 
 (실제경로-외부에선 접근불가능한 폴더)
 D:\workspace_jsp2\.metadata\.plugins
 \org.eclipse.wst.server.core\tmp0\wtpwebapps
 \StudyJSP2\upload
 
 
 
 https://developer.mozilla.org/ko/
  
  https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types
   
     MultipartRequest multi 
      = new MultipartRequest(
    		  request, =>jsp 내장객체 (파라미터)
    		  path, => 실제 파일이 저장될 위치
    		  maxSize, => 파일의 크기
    		  "UTF-8", => 파일업로드시 인코딩
    		  new DefaultFileRenamePolicy() => 파일이름 중복처리 객체
    		  );	 
   
 
 * 절대 경로
   - 파일, 웹페이지가 가지고있는 고유한 경로.
   => 해당주소(경로)를 알면 바로 코드/파일 실행가능
   - 절대경로는 시작점에 "/"(root)
   - JSP(Dynamic Web Project) => WebContet폴더가 시작점 (model1 구조)
   - JSP(Tomcat Project) => 프로젝트 폴더명  시작점 (model2 구조)
 
 * 상대 경로
   - 파일이 위치한 폴더를 기준으로 시작점을 지정후 파일을 찾아가는 경로
   - / : 최상위 폴더
   - ./ : 현재폴더  (./ 생략가능)
   - ../ : 상위 폴더
   
     
   
   
   
  
  
  
  
  
  
  
    
   
   
   
   
      
  
  
   
   
   
   
     	
  	
  
 
   
 
 
 
   
    




